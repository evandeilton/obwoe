// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// chimerge_woe
List chimerge_woe(DataFrame data, std::string target_col, CharacterVector feature_cols, int min_bins, int max_bins, double sig_level, double min_size, double smooth, bool monotonic, double min_iv, int digits, std::string miss_policy, NumericVector special_vals, int max_cat, double rare_pct, std::string cat_sep, std::string method, bool parallel, bool cache, Nullable<NumericVector> weights, bool verbose);
RcppExport SEXP _obwoe_chimerge_woe(SEXP dataSEXP, SEXP target_colSEXP, SEXP feature_colsSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP sig_levelSEXP, SEXP min_sizeSEXP, SEXP smoothSEXP, SEXP monotonicSEXP, SEXP min_ivSEXP, SEXP digitsSEXP, SEXP miss_policySEXP, SEXP special_valsSEXP, SEXP max_catSEXP, SEXP rare_pctSEXP, SEXP cat_sepSEXP, SEXP methodSEXP, SEXP parallelSEXP, SEXP cacheSEXP, SEXP weightsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type target_col(target_colSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type feature_cols(feature_colsSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< double >::type sig_level(sig_levelSEXP);
    Rcpp::traits::input_parameter< double >::type min_size(min_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type smooth(smoothSEXP);
    Rcpp::traits::input_parameter< bool >::type monotonic(monotonicSEXP);
    Rcpp::traits::input_parameter< double >::type min_iv(min_ivSEXP);
    Rcpp::traits::input_parameter< int >::type digits(digitsSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_policy(miss_policySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type special_vals(special_valsSEXP);
    Rcpp::traits::input_parameter< int >::type max_cat(max_catSEXP);
    Rcpp::traits::input_parameter< double >::type rare_pct(rare_pctSEXP);
    Rcpp::traits::input_parameter< std::string >::type cat_sep(cat_sepSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< bool >::type cache(cacheSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(chimerge_woe(data, target_col, feature_cols, min_bins, max_bins, sig_level, min_size, smooth, monotonic, min_iv, digits, miss_policy, special_vals, max_cat, rare_pct, cat_sep, method, parallel, cache, weights, verbose));
    return rcpp_result_gen;
END_RCPP
}
// woe_gains
List woe_gains(List binning_result, bool sort_by_woe, bool include_all_metrics, Nullable<CharacterVector> selected_features, bool verbose);
RcppExport SEXP _obwoe_woe_gains(SEXP binning_resultSEXP, SEXP sort_by_woeSEXP, SEXP include_all_metricsSEXP, SEXP selected_featuresSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type binning_result(binning_resultSEXP);
    Rcpp::traits::input_parameter< bool >::type sort_by_woe(sort_by_woeSEXP);
    Rcpp::traits::input_parameter< bool >::type include_all_metrics(include_all_metricsSEXP);
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type selected_features(selected_featuresSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(woe_gains(binning_result, sort_by_woe, include_all_metrics, selected_features, verbose));
    return rcpp_result_gen;
END_RCPP
}
// woe_gains_compare
DataFrame woe_gains_compare(List gains_results, std::string metric, bool descending);
RcppExport SEXP _obwoe_woe_gains_compare(SEXP gains_resultsSEXP, SEXP metricSEXP, SEXP descendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type gains_results(gains_resultsSEXP);
    Rcpp::traits::input_parameter< std::string >::type metric(metricSEXP);
    Rcpp::traits::input_parameter< bool >::type descending(descendingSEXP);
    rcpp_result_gen = Rcpp::wrap(woe_gains_compare(gains_results, metric, descending));
    return rcpp_result_gen;
END_RCPP
}
// dmiv_woe
List dmiv_woe(DataFrame data, std::string target_col, CharacterVector feature_cols, int min_bins, int max_bins, std::string divergence_method, std::string woe_method, double smooth, double min_bin_size, std::string optimization_method, bool enforce_monotonicity, std::string monotonicity_type, int max_iterations, double convergence_threshold, bool use_cross_validation, int cv_folds, double l1_regularization, double l2_regularization, bool compute_confidence_intervals, double confidence_level, bool parallel, int n_threads, Nullable<NumericVector> weights, NumericVector special_values, std::string missing_policy, std::string cat_sep, int digits, double rare_category_threshold, int random_seed, bool verbose);
RcppExport SEXP _obwoe_dmiv_woe(SEXP dataSEXP, SEXP target_colSEXP, SEXP feature_colsSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP divergence_methodSEXP, SEXP woe_methodSEXP, SEXP smoothSEXP, SEXP min_bin_sizeSEXP, SEXP optimization_methodSEXP, SEXP enforce_monotonicitySEXP, SEXP monotonicity_typeSEXP, SEXP max_iterationsSEXP, SEXP convergence_thresholdSEXP, SEXP use_cross_validationSEXP, SEXP cv_foldsSEXP, SEXP l1_regularizationSEXP, SEXP l2_regularizationSEXP, SEXP compute_confidence_intervalsSEXP, SEXP confidence_levelSEXP, SEXP parallelSEXP, SEXP n_threadsSEXP, SEXP weightsSEXP, SEXP special_valuesSEXP, SEXP missing_policySEXP, SEXP cat_sepSEXP, SEXP digitsSEXP, SEXP rare_category_thresholdSEXP, SEXP random_seedSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type target_col(target_colSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type feature_cols(feature_colsSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< std::string >::type divergence_method(divergence_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type woe_method(woe_methodSEXP);
    Rcpp::traits::input_parameter< double >::type smooth(smoothSEXP);
    Rcpp::traits::input_parameter< double >::type min_bin_size(min_bin_sizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type optimization_method(optimization_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type enforce_monotonicity(enforce_monotonicitySEXP);
    Rcpp::traits::input_parameter< std::string >::type monotonicity_type(monotonicity_typeSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type convergence_threshold(convergence_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type use_cross_validation(use_cross_validationSEXP);
    Rcpp::traits::input_parameter< int >::type cv_folds(cv_foldsSEXP);
    Rcpp::traits::input_parameter< double >::type l1_regularization(l1_regularizationSEXP);
    Rcpp::traits::input_parameter< double >::type l2_regularization(l2_regularizationSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_confidence_intervals(compute_confidence_intervalsSEXP);
    Rcpp::traits::input_parameter< double >::type confidence_level(confidence_levelSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type special_values(special_valuesSEXP);
    Rcpp::traits::input_parameter< std::string >::type missing_policy(missing_policySEXP);
    Rcpp::traits::input_parameter< std::string >::type cat_sep(cat_sepSEXP);
    Rcpp::traits::input_parameter< int >::type digits(digitsSEXP);
    Rcpp::traits::input_parameter< double >::type rare_category_threshold(rare_category_thresholdSEXP);
    Rcpp::traits::input_parameter< int >::type random_seed(random_seedSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(dmiv_woe(data, target_col, feature_cols, min_bins, max_bins, divergence_method, woe_method, smooth, min_bin_size, optimization_method, enforce_monotonicity, monotonicity_type, max_iterations, convergence_threshold, use_cross_validation, cv_folds, l1_regularization, l2_regularization, compute_confidence_intervals, confidence_level, parallel, n_threads, weights, special_values, missing_policy, cat_sep, digits, rare_category_threshold, random_seed, verbose));
    return rcpp_result_gen;
END_RCPP
}
// cart_woe
List cart_woe(DataFrame data, std::string target_col, CharacterVector feature_cols, int min_bins, int max_bins, std::string method, std::string miss_policy, std::string cat_sep, int digits, double smooth, std::string criterion, double min_size, bool use_pruning, int cv_folds, std::string monotonic_trend, std::string monotonic_mode, bool parallel, Nullable<NumericVector> weights, NumericVector special_vals, int max_cat, double rare_pct, int verbose);
RcppExport SEXP _obwoe_cart_woe(SEXP dataSEXP, SEXP target_colSEXP, SEXP feature_colsSEXP, SEXP min_binsSEXP, SEXP max_binsSEXP, SEXP methodSEXP, SEXP miss_policySEXP, SEXP cat_sepSEXP, SEXP digitsSEXP, SEXP smoothSEXP, SEXP criterionSEXP, SEXP min_sizeSEXP, SEXP use_pruningSEXP, SEXP cv_foldsSEXP, SEXP monotonic_trendSEXP, SEXP monotonic_modeSEXP, SEXP parallelSEXP, SEXP weightsSEXP, SEXP special_valsSEXP, SEXP max_catSEXP, SEXP rare_pctSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::string >::type target_col(target_colSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type feature_cols(feature_colsSEXP);
    Rcpp::traits::input_parameter< int >::type min_bins(min_binsSEXP);
    Rcpp::traits::input_parameter< int >::type max_bins(max_binsSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type miss_policy(miss_policySEXP);
    Rcpp::traits::input_parameter< std::string >::type cat_sep(cat_sepSEXP);
    Rcpp::traits::input_parameter< int >::type digits(digitsSEXP);
    Rcpp::traits::input_parameter< double >::type smooth(smoothSEXP);
    Rcpp::traits::input_parameter< std::string >::type criterion(criterionSEXP);
    Rcpp::traits::input_parameter< double >::type min_size(min_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type use_pruning(use_pruningSEXP);
    Rcpp::traits::input_parameter< int >::type cv_folds(cv_foldsSEXP);
    Rcpp::traits::input_parameter< std::string >::type monotonic_trend(monotonic_trendSEXP);
    Rcpp::traits::input_parameter< std::string >::type monotonic_mode(monotonic_modeSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type special_vals(special_valsSEXP);
    Rcpp::traits::input_parameter< int >::type max_cat(max_catSEXP);
    Rcpp::traits::input_parameter< double >::type rare_pct(rare_pctSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(cart_woe(data, target_col, feature_cols, min_bins, max_bins, method, miss_policy, cat_sep, digits, smooth, criterion, min_size, use_pruning, cv_folds, monotonic_trend, monotonic_mode, parallel, weights, special_vals, max_cat, rare_pct, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_obwoe_chimerge_woe", (DL_FUNC) &_obwoe_chimerge_woe, 21},
    {"_obwoe_woe_gains", (DL_FUNC) &_obwoe_woe_gains, 5},
    {"_obwoe_woe_gains_compare", (DL_FUNC) &_obwoe_woe_gains_compare, 3},
    {"_obwoe_dmiv_woe", (DL_FUNC) &_obwoe_dmiv_woe, 30},
    {"_obwoe_cart_woe", (DL_FUNC) &_obwoe_cart_woe, 22},
    {NULL, NULL, 0}
};

RcppExport void R_init_obwoe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
